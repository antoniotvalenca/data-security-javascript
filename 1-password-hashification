BCRYPT E HASHIFICAÇÃO DE SENHAS

-> Maneira de armazenar senhas em formato de hash

-> Após o armazenamento, toda vez que for feito o login,
   o banco de dados fará um "compare" da senha digitada com
   o hash, checando se o hash corresponde àquela string
   
-> npm i bcrypt

-> No MODEL de USER:
        -> hooks: {
                beforeCreate: async user => {
                    if (user.password_hash) {
                        user.password_hash = await bcrypt.hash(user.password_hash, 9)
                    }
                }
            }
        -> Essa função, basicamente, vai hashificar a string passada num salt de número 9,
        antes de passá-la para o banco
        
-> No SERVICE/CONTROLLER de LOGIN
        -> compareSync(data.password, user.password_hash);
              -> vai fazer a comparaçao da password passado no data vs. a hash do banco de dados


EM SUMA:
** bcrypt.hash(password, 9) => cria o hash daquela password **
** bcrypt.compareSync(passwordEmString, passwordEmHash) => compara e confirma se corresponde ou não **

_____________________________________________________________________________________________________________________________________________________

(OUTRA) EXPLICAÇÃO

-> O bcrypt é uma biblioteca responsável por "hashificar" senhas de cadastros de usuário no banco de dados. Dessa forma, a senha não é armazenada em
plaintext, tornando a aplicação mais segura à possíveis ataques ao banco de dados (ou à acessos de administradores superiores)

_____________________________________________________________________________________________________________________________________________________

INSTALAÇÃO/BASE

1) npm install bcrypt (instalação no terminal)

2) primeiro contato
  -> 2.1) COMMONJS
    -> const bcrypt = require('bcrypt');
       const password = 'password123'
       
       const hashedPassword = async pass => {
        const hash = await bcrypt.hash(pass, 10);
        console.log(hash);
       }
       
       hashedPassword(password); // vai logar uma hash enorme que representa unicamente aquela senha
       
       const isMatch = async (pass, hash) => {
        const result = await bcrypt.compare(pass, hash);
        console.log(result);
       }
       
       isMatch(password, '$2b$10$9BZrsGYRkHCATwn2w7qcrOEM.LOLXzP5pkDPbg3fBPzf4QK/sAL.u') // vai checar se aquela hash combina com aquela password
       
  -> 2.2) ES6
    -> import bcrypt from 'bcrypt';
       const password = 'password123';
       const hash = await bcrypt.hash(password, 10);
       const isMatch = await bcrypt.compare(password, hash);
       
       console.log(isMatch); // true ou false
 -> 2.3) Em suma:
    -> bcrypt.hash('senha123', 10) // gera uma hash pra senha123
    -> bcrypt.compare('senha123', hash) // checa se aquela hash pertence a senha
       
_____________________________________________________________________________________________________________________________________________________

UTILIZAÇÃO C/ EXPRESS

import bcrypt from 'bcrypt'
import express from 'express'

const app = express();

app.post('/signup', (req, res) => {
  const { username, password } = req.body;
  const hash = await bcrypt.hash(password, 10)
  
  User.create({username, password})
  res.send('ok')
})

app.post('/login', (req, res) => {
  const { username, password } = req.body;
  const user = User.findall(blablabla)
  
  if (!user) res.send('no user') return
  
  const isValid = await bcrypt.compare(password, user.password)
})
