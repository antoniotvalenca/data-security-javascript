REDIS stands for Remote Dictionary Server

-> É um banco de dados NoSQL
  -> de modo geral, o Redis não tem entendimento qualquer sobre colunas/tabelas e armazena seus dados em pares de chave e valor
  -> Ou seja, não é bom para armazenar dados estruturados como em bancos SQL, mas sim para guardar esses dados rápidos de chave e valor
-> Diferentemente de outros bancos de dados (que armazenam os dados no disco), o Redis armazena na memória RAM
  -> o que torna os dados de muito rápido acesso mas, em contra partida, os torna voláteis também (se seu pc der pau, você perde tudo)
  -> ele é usado para "cache"
    -> coisas que são muito acessadas ou dados que demoram muito para ser computados, são guardados no redis

                  (1)                              (3)
                  =>                               =>
APLICAÇAO                    CACHE (REDIS)                DATABASE(MYSQL, POR EXEMEPLO)
                  <=                               <=
                  (2)
            
            



1) Verificar se os dados estão em cache
2) Se estiver em cache, retorna para a aplicação
3) Se não estiver em cache, obter no banco de dados, salvar no cache e retornar para a aplicação

-> Em suma, a diferença entre Redis e um banco de dados de disco é que o redis lida com validação de requisições, através de dados armazenados no
servidor individual de cada cliente, enquanto o banco de dados mesmo lida com requisiçoes (já validadas) de dados
___________________________________________________________________________________________________________________________________________

INSTALAÇÃO *****

(MAQUINA)
-> Se estiver no MAC:
    -> usar o homebrew
    -> brew install redis

(PROJETO)
-> npm i redis
    -> const redis = require('redis');
___________________________________________________________________________________________________________________________________________

REDIS COM EXPRESS RATE LIMIT

-> Apesar do redis ser, a princípio, usado para o armazenamento rápido de informações volateis chave, ele pode ser combinado com o express rate limit
para ter um controle maior do rate limit de um usuario
-> Isto é: pode acontecer de um usuário cobrar várias requisicoes de um servidor em uma porta e acabar abrindo em outra para burlar esse sistema de
limite de requisicao. e é ai que o redis entra, pois ele pode avaliar por ip, ou user id a quantidade de requisicoes
-> Entenda o código a seguir
  -> (no server.js/app.js):
    require('./src/database');

    const express = require('express');
    const app = express();
    const redis = require('redis');
    const RedisStore = require('rate-limit-redis');
    const rateLimit = require("express-rate-limit");
    const userRoutes = require('./src/routes/userRoutes');
    const quizzRoutes = require('./src/routes/quizzRoutes');

    const redisClient = redis.createClient({ // AS CREDENCIAIS DO REDIS
      socket: {
        host: 'localhost',
        port: 6379
      }
    });
    
    const connectToRedis = async () => { await redisClient.connect().then(() => console.log('conectado no redis')).catch(() => console.log('erro ao conectar')) };
    connectToRedis(); // CRIANDO UMA CONEXAO COM O REDIS

    const limiter = rateLimit({
      windowMs: 5 * 60 * 1000, // ESTOU DIZENDO QUE PODE SER FEITO UM MÁXIMO DE 2 REQUISICOES POR 5 MINUTOS
      max: 2,
      keyGenerator: (req) => { return req.userId }, // POR DEFAULT ELE CALCULA PELO IP, MAS PODEMOS PASSAR POR EXEMPLO ALGUM ASPECTO DO HEADER, COMO O USER ID
      // skip: (req) => !req.userId,
      handler: (req, res) => {
        res.status(429).json({ message: 'Too many requests, please try again later.' });
      },
      store: new RedisStore({
        client: redisClient,
        sendCommand: (...args) => redisClient.sendCommand(args) // COMANDO QUE GUARDA AS INFOS NO REDIS
      })
    });

    app.use(limiter) // USANDO O MIDWARE LIMITER EM TODAS AS ROTAS DA APLICAÇÃO
    app.use(express.json());
    app.use(userRoutes);
    app.use(quizzRoutes);

    app.listen(3002, () => { console.log('listening on port 3001') });

___________________________________________________________________________________________________________________________________________

COMANDOS *****

-> redis-server (abre um servidor do redis numa porta default de numero x)
-> redis-cli (abre um ambiente para voce usar linguagem do redis para realizar operaçoes CRUD no banco)
  -> quit (quita do redis-cli)
  -> SET key value (cria uma chave keu com o valor value)
  -> GET key (retorna o valor da chave key)
  -> EXISTS key (retorna 0[falso] caso a chave não exista ou 1[verdadeiro] caso ela exista)
  -> KEYS * (mostra todas as chaves)
  -> flushall (limpa o cache)
  -> ttl key (checa o tempo de expiração da chave key)
  -> expire key 10 (seta para expirar a chave key em 10 segundos)
  -> setex key 10 value (cria a chave key com o valor value que expira em 10 segundos)

  -> lpush key value (coloca no topo de uma array key, o valor value)
  -> lrange key 0 -1 (printar a array "key" do indice 0 até o último índice)
  -> LPOP key (vai tirar do array "key" o item que está no topo)
  -> RPOP key (vai tirar do array "key" o item que está por último)


* ler sobre cluster
